
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { AuditLogInsert } from '@/types/supabase';
import { config } from '@/config/environment';

// Use configuration from environment file
const SUPABASE_URL = config.supabase.url;
const SUPABASE_PUBLISHABLE_KEY = config.supabase.anonKey;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper functions for common database operations

/**
 * Creates an audit log entry in the database
 * @param logData - The audit log data to insert
 * @returns Promise with the inserted data or error
 */
export async function createAuditLog(logData: AuditLogInsert) {
  const { data, error } = await supabase
    .from('audit_logs')
    .insert(logData)
    .select()
    .single();
  
  if (error) {
    console.error('Error creating audit log:', error);
    return { data: null, error };
  }
  
  return { data, error: null };
}

/**
 * Gets the current authenticated user with profile data
 * @returns Promise with the user data or null
 */
export async function getCurrentUserWithProfile() {
  const { data: { user }, error: authError } = await supabase.auth.getUser();
  
  if (authError || !user) {
    console.error('Error getting current user:', authError);
    return { user: null, profile: null, error: authError };
  }
  
  // Get profile data
  const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', user.id)
    .single();
  
  if (profileError) {
    console.error('Error getting user profile:', profileError);
    return { user, profile: null, error: profileError };
  }
  
  return { user, profile, error: null };
}
